{
	"name": "milestone2",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "metricsshir",
						"type": "DatasetReference"
					},
					"name": "metricsshir"
				},
				{
					"dataset": {
						"referenceName": "Parquet2",
						"type": "DatasetReference"
					},
					"name": "policies"
				},
				{
					"dataset": {
						"referenceName": "Parquet4",
						"type": "DatasetReference"
					},
					"name": "geography"
				},
				{
					"dataset": {
						"referenceName": "Parquet5",
						"type": "DatasetReference"
					},
					"name": "dates"
				},
				{
					"dataset": {
						"referenceName": "azureMetrics",
						"type": "DatasetReference"
					},
					"name": "source1"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ODScases",
						"type": "DatasetReference"
					},
					"name": "case"
				},
				{
					"dataset": {
						"referenceName": "ODSdeaths",
						"type": "DatasetReference"
					},
					"name": "death"
				},
				{
					"dataset": {
						"referenceName": "ODSrecovered",
						"type": "DatasetReference"
					},
					"name": "recovered"
				},
				{
					"dataset": {
						"referenceName": "ODSpolicy",
						"type": "DatasetReference"
					},
					"name": "policiesink"
				},
				{
					"dataset": {
						"referenceName": "ODSgeo",
						"type": "DatasetReference"
					},
					"name": "geographysink"
				},
				{
					"dataset": {
						"referenceName": "ODSdate",
						"type": "DatasetReference"
					},
					"name": "datesink"
				}
			],
			"transformations": [
				{
					"name": "cases"
				},
				{
					"name": "union1"
				},
				{
					"name": "deaths"
				},
				{
					"name": "recover"
				}
			],
			"scriptLines": [
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> metricsshir",
				"source(output(",
				"          CountryName as string,",
				"          CountryCode as string,",
				"          RegionName as string,",
				"          RegionCode as decimal(38,18),",
				"          Jurisdiction as string,",
				"          Date as timestamp,",
				"          C1_Schoolclosing as double,",
				"          C1_Flag as boolean,",
				"          C2_Workplaceclosing as double,",
				"          C2_Flag as boolean,",
				"          C3_Cancelpublicevents as double,",
				"          C3_Flag as boolean,",
				"          C4_Restrictionsongatherings as double,",
				"          C4_Flag as boolean,",
				"          C5_Closepublictransport as double,",
				"          C5_Flag as boolean,",
				"          C6_Stayathomerequirements as double,",
				"          C6_Flag as boolean,",
				"          C7_Restrictionsoninternalmovement as double,",
				"          C7_Flag as boolean,",
				"          C8_Internationaltravelcontrols as double,",
				"          E1_Incomesupport as double,",
				"          E1_Flag as boolean,",
				"          E2_Debtcontractrelief as double,",
				"          E3_Fiscalmeasures as double,",
				"          E4_Internationalsupport as double,",
				"          H1_Publicinformationcampaigns as double,",
				"          H1_Flag as boolean,",
				"          H2_Testingpolicy as double,",
				"          H3_Contacttracing as double,",
				"          H4_Emergencyinvestmentinhealthcare as double,",
				"          H5_Investmentinvaccines as double,",
				"          H6_FacialCoverings as long,",
				"          H6_Flag as long,",
				"          H7_Vaccinationpolicy as long,",
				"          H7_Flag as long,",
				"          H8_Protectionofelderlypeople as long,",
				"          H8_Flag as long,",
				"          M1_Wildcard as long,",
				"          StringencyIndex as double,",
				"          StringencyIndexForDisplay as double,",
				"          StringencyLegacyIndex as double,",
				"          StringencyLegacyIndexForDisplay as double,",
				"          GovernmentResponseIndex as double,",
				"          GovernmentResponseIndexForDisplay as double,",
				"          ContainmentHealthIndex as double,",
				"          ContainmentHealthIndexForDisplay as double,",
				"          EconomicSupportIndex as double,",
				"          EconomicSupportIndexForDisplay as double,",
				"          id as string,",
				"          {_rid} as string,",
				"          {_self} as string,",
				"          {_etag} as string,",
				"          {_attachments} as string,",
				"          {_ts} as long",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> policies",
				"source(output(",
				"          Country as string,",
				"          CountryCode as string,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5)",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> geography",
				"source(output(",
				"          DateKey as integer,",
				"          FullDate as date,",
				"          isWeekDay as boolean,",
				"          DayOfWeek as integer,",
				"          DayOfMonth as integer,",
				"          DayOfQuarter as integer,",
				"          DayOfYear as integer,",
				"          DayName as string,",
				"          WeekOfYear as integer,",
				"          WeekName as string,",
				"          MonthOfYear as integer,",
				"          MonthName as string,",
				"          CalendarQuarter as integer,",
				"          CalendarQuarterName as string,",
				"          CalendarYear as integer,",
				"          FiscalMonth as integer,",
				"          FiscalMonthName as string,",
				"          FiscalQuarter as integer,",
				"          FiscalQuarterName as string,",
				"          FiscalYear as integer",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false,",
				"     format: 'parquet') ~> dates",
				"source(output(",
				"          ID as integer,",
				"          Updated as date,",
				"          Confirmed as integer,",
				"          Confirmed_Change as integer,",
				"          Deaths as integer,",
				"          Deaths_Change as integer,",
				"          Recovered as integer,",
				"          Recovered_Change as integer,",
				"          Latitude as decimal(10,5),",
				"          Longitude as decimal(10,5),",
				"          ISO2 as string,",
				"          ISO3 as string,",
				"          Country_Region as string,",
				"          load_time as timestamp",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     isolationLevel: 'READ_UNCOMMITTED',",
				"     format: 'table') ~> source1",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Confirmed,",
				"          Confirmed_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> cases",
				"metricsshir, source1 union(byName: true)~> union1",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Deaths,",
				"          Deaths_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> deaths",
				"union1 select(mapColumn(",
				"          ID,",
				"          Updated,",
				"          Recovered,",
				"          Recovered_Change,",
				"          Latitude,",
				"          Longitude,",
				"          ISO2,",
				"          ISO3,",
				"          Country_Region,",
				"          load_time",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> recover",
				"cases sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dbo.cases.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> case",
				"deaths sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dbo.deaths.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> death",
				"recover sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dbo.recoveries.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> recovered",
				"policies sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dbo.policies.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> policiesink",
				"geography sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dbo.geography.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> geographysink",
				"dates sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     format: 'parquet',",
				"     partitionFileNames:['dbo.dates.parquet'],",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> datesink"
			]
		}
	}
}